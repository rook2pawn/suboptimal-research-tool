// Generated by CoffeeScript 1.9.3
(function() {
  var Lexer, Tagger, find_out, getQuerySuggestions, lexer, pluralize, ref, research, tagger, unique,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  unique = require("array-unique");

  getQuerySuggestions = require("google-autocomplete").getQuerySuggestions;

  ref = require("pos"), Lexer = ref.Lexer, Tagger = ref.Tagger;

  lexer = new Lexer();

  tagger = new Tagger();

  pluralize = require("pluralize");

  find_out = function(query, arg, callback) {
    var avoid, capture;
    avoid = arg.avoid, capture = arg.capture;
    return getQuerySuggestions(query, function(err, suggestions) {
      var captured, captured_words, i, j, len, len1, okay, ref1, ref2, relevance, suggestion, tag, tagged_words, type, word, words;
      if (err) {
        return callback(err);
      }
      captured = [];
      for (i = 0, len = suggestions.length; i < len; i++) {
        ref1 = suggestions[i], suggestion = ref1.suggestion, type = ref1.type, relevance = ref1.relevance;
        if (!(type === "QUERY")) {
          continue;
        }
        words = lexer.lex(suggestion);
        tagged_words = tagger.tag(words);
        okay = true;
        for (j = 0, len1 = tagged_words.length; j < len1; j++) {
          ref2 = tagged_words[j], word = ref2[0], tag = ref2[1];
          if ((!(indexOf.call(query.split(" "), word) >= 0)) && tag.match(avoid)) {
            okay = false;
          }
        }
        if (okay) {
          captured_words = (function() {
            var k, len2, ref3, results;
            results = [];
            for (k = 0, len2 = tagged_words.length; k < len2; k++) {
              ref3 = tagged_words[k], word = ref3[0], tag = ref3[1];
              if ((!(indexOf.call(query.split(" "), word) >= 0)) && tag.match(capture)) {
                results.push(word);
              }
            }
            return results;
          })();
          if (captured_words.length) {
            captured.push(captured_words.join(" "));
          }
        }
      }
      return callback(null, unique(captured));
    });
  };

  research = function(subject, callback) {
    var subject_plural, subject_singular;
    subject_singular = pluralize(subject, 1);
    subject_plural = pluralize(subject, 2);
    return find_out("Why are " + subject_plural, {
      avoid: /NN|VBN|IN/,
      capture: /JJ/
    }, function(err, subject_adjectives) {
      if (err) {
        return callback(err);
      }
      return find_out("Why do " + subject_plural, {
        avoid: /IN/,
        capture: /V|NN/
      }, function(err, subject_verbs) {
        if (err) {
          return callback(err);
        }
        subject_verbs = subject_verbs.filter(function(v) {
          return !v.match(/ing|have /);
        });
        return callback(null, {
          plural: subject_plural,
          singular: subject_singular,
          verbs: subject_verbs,
          adjectives: subject_adjectives
        });
      });
    });
  };

  module.exports = research;

}).call(this);
